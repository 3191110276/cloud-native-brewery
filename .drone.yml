kind: pipeline
name: build


steps:

#ADMINFILE
- name: publish_adminfile_nginx
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/adminfile-nginx
   context: ./images/adminfile/
   dockerfile: ./images/adminfile/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#APPD_DBAGENT
- name: publish_appddbagent
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/appd-dbagent
   context: ./images/appd_dbagent/
   dockerfile: ./images/appd_dbagent/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW
   
   
#APPD_NODEAGENT
- name: publish_appdnodeagent
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/appd-nodeagent
   context: ./images/appd_nodeagent/
   dockerfile: ./images/appd_nodeagent/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW


#EXTPAYMENT
- name: publish_extpayment_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/extpayment-python
   context: ./images/extpayment/
   dockerfile: ./images/extpayment/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#EXTPROD
- name: publish_extprod_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/extprod-python
   context: ./images/extprod/
   dockerfile: ./images/extprod/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
     
     
#EXTPRODJOB
- name: publish_extprodjob_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/extprodjob-python
   context: ./images/extprodjob/
   dockerfile: ./images/extprodjob/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD

     
#FULFILMENT
- name: publish_fulfilment_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/fulfilment-python
   context: ./images/fulfilment/
   dockerfile: ./images/fulfilment/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#INVENTORYDB
- name: publish_inventorydb_mariadb
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/inventorydb-mariadb
   context: ./images/inventorydb/
   dockerfile: ./images/inventorydb/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
     
     
#NOTIFICATION
- name: publish_notification_java
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/notification-java
   context: ./images/notification/
   dockerfile: ./images/notification/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW


#ORDER
- name: publish_order_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/order-python
   context: ./images/order/
   dockerfile: ./images/order/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#ORDERFILE
- name: publish_orderfile_apache
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/orderfile-apache
   context: ./images/orderfile/
   dockerfile: ./images/orderfile/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW
     
     
#ORDERPROCESSING
- name: publish_orderprocessing_php
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/orderprocessing-php
   context: ./images/orderprocessing/
   dockerfile: ./images/orderprocessing/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW


#PAYMENT
- name: publish_payment_nodejs
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/payment-nodejs
   context: ./images/payment/
   dockerfile: ./images/payment/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#PRODREQUEST
- name: publish_prodrequest_java
  image: plugins/docker
  depends_on: [ clone ]
  environment:
    APPD_USER:
      from_secret: APPD_USERNAME
    APPD_PW:
      from_secret: APPD_PASSWORD
  settings:
   repo: mimaurer/prodrequest-java
   context: ./images/prodrequest/
   dockerfile: ./images/prodrequest/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
   build_args_from_env:
   - APPD_USER
   - APPD_PW

     
#PRODUCTION
- name: publish_production_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/production-python
   context: ./images/production/
   dockerfile: ./images/production/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD


#TRAFFICGEN
- name: publish_trafficgen_python
  image: plugins/docker
  depends_on: [ clone ]
  settings:
   repo: mimaurer/trafficgen-python
   context: ./images/trafficgen/
   dockerfile: ./images/trafficgen/Dockerfile
   tags: [ "v${DRONE_BUILD_NUMBER}-${DRONE_COMMIT_BRANCH}", "${DRONE_COMMIT_BRANCH}" ]
   username:
     from_secret: DOCKERHUB_USERNAME
   password:
     from_secret: DOCKERHUB_PASSWORD
     
     
#SUCCESS NOTIFICATION
- name: success_notification
  image: plugins/webhook
  depends_on: [ publish_adminfile_nginx, publish_appddbagent, publish_appdnodeagent, publish_extpayment_python, publish_inventorydb_mariadb, publish_order_python, publish_orderfile_apache, publish_orderprocessing_php, publish_payment_nodejs, publish_extprod_python, publish_production_python, publish_trafficgen_python ]
  when:
    status:
    - success
  settings:
    urls: https://webexapis.com/v1/messages 
    content_type: application/json
    token_value:
      from_secret: WEBEX_TOKEN
    token_type: Bearer
    template: {"toPersonEmail": "mimaurer@cisco.com", "markdown": "✅ Build #{{ build.number }} for *{{repo.owner}}/{{ repo.name }}* finished with status SUCCESS \n* **Commit:** {{ build.commit }} \n* **Author:** {{ build.author }} \n **Link:** {{ build.link }}"}
    
#FAILURE NOTIFICATION
- name: failure_notification
  image: plugins/webhook
  depends_on: [ publish_adminfile_nginx, publish_appddbagent, publish_appdnodeagent, publish_extpayment_python, publish_inventorydb_mariadb, publish_order_python, publish_orderfile_apache, publish_orderprocessing_php, publish_payment_nodejs, publish_extprod_python, publish_production_python, publish_trafficgen_python ]
  when:
    status:
    - failure
  settings:
    urls: https://webexapis.com/v1/messages 
    content_type: application/json
    token_value:
      from_secret: WEBEX_TOKEN
    token_type: Bearer
    template: {"toPersonEmail": "mimaurer@cisco.com", "markdown": "❌ Build #{{ build.number }} for *{{repo.owner}}/{{ repo.name }}* FAILED \n* **Commit:** {{ build.commit }} \n* **Author:** {{ build.author }} \n **Link:** {{ build.link }}"}