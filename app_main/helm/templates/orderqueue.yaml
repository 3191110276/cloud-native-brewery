#https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq

#kind: NetworkPolicy
#apiVersion: networking.k8s.io/v1
#metadata:
#  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
#  namespace: {{ .Release.Namespace }}
#spec:
#  podSelector:
#    matchLabels:
#      tier: {{ .Values.initqueue_name }}
#  ingress:
#    # Allow inbound connections
#    - ports:
#        - port: 4369  # EPMD
#        - port: 5672
#        - port: 5671
#        - port: 25672
#        - port: 15672
#      from:
#        - podSelector:
#            matchLabels:
#              tier: {{ .Values.initqueue_name }}
#        - podSelector:
#            matchLabels:
#              tier: {{ .Values.initqueue_name }}
#    - ports:
#        - port: 9419
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
  namespace: {{ .Release.Namespace }}
spec:
  minAvailable: 1
  selector:
    matchLabels: 
      tier: {{ .Values.initqueue_name }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
  namespace: {{ .Release.Namespace }}
secrets:
  - name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  rabbitmq-password: "Z3Vlc3QK" # guest
#  rabbitmq-password: "dXNlcgo=" # user
  rabbitmq-erlang-cookie: "OWU2SE1ZMTRwa2NMTVZIQjhiUnlmNzFPempwSnBRSDE="
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-config
  namespace: {{ .Release.Namespace }}
data:
  rabbitmq.conf: |-
    ## Username and password
    default_user = guest
    default_pass = guest
    #default_user = user
    #default_pass = user
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = {{ .Values.appname }}-{{ .Values.initqueue_name }}-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-endpoint-reader
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-endpoint-reader
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-endpoint-reader
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-headless
  namespace: {{ .Release.Namespace }}
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    tier: {{ .Values.initqueue_name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    tier: {{ .Values.initqueue_name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      tier: {{ .Values.initqueue_name }}
  template:
    metadata:
      labels:
        tier: {{ .Values.initqueue_name }}
      annotations:
        checksum/config: 0a4e272ea944acede38be298ecdf4ce8b4a2b83f32c2015e815c4ee1d4c78162
        checksum/secret: cdf4233d6b9f1dab011c2fd778cf07f09c0565cdf595f41c2ddb275baad49e5c
    spec:
      
      serviceAccountName: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    tier: {{ .Values.initqueue_name }}
                namespaces:
                  - {{ .Release.Namespace }}
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.9-debian-10-r64
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "{{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
#              value: "user"
              value: "guest"
            - name: RABBITMQ_PASSWORD
              value: "guest"
#              valueFrom:
#                secretKeyRef:
#                  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq
#                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: {{ .Values.appname }}-{{ .Values.initqueue_name }}-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: {{ .Values.appname }}-{{ .Values.initqueue_name }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"























#apiVersion: v1
#kind: Namespace
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-system
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-system
#---
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: rabbitmq-cluster-operator
#  namespace: default
#  #namespace: rabbitmq-system
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: Role
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-cluster-operator
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-cluster-leader-election-role
#  namespace: default
#  #namespace: rabbitmq-system
#rules:
#- apiGroups:
#  - ""
#  resources:
#  - configmaps
#  verbs:
#  - get
#  - list
#  - watch
#  - create
#  - update
#  - patch
#  - delete
#- apiGroups:
#  - ""
#  resources:
#  - configmaps/status
#  verbs:
#  - get
#  - update
#  - patch
#- apiGroups:
#  - ""
#  resources:
#  - events
#  verbs:
#  - create
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRole
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-cluster-operator
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-cluster-operator-role
#rules:
#- apiGroups:
#  - ""
#  resources:
#  - configmaps
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - ""
#  resources:
#  - endpoints
#  verbs:
#  - get
#  - list
#  - watch
#- apiGroups:
#  - ""
#  resources:
#  - events
#  verbs:
#  - create
#  - get
#  - patch
#- apiGroups:
#  - ""
#  resources:
#  - pods
#  verbs:
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - ""
#  resources:
#  - pods/exec
#  verbs:
#  - create
#- apiGroups:
#  - ""
#  resources:
#  - secrets
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - ""
#  resources:
#  - serviceaccounts
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - ""
#  resources:
#  - services
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - apps
#  resources:
#  - statefulsets
#  verbs:
#  - create
#  - delete
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - rabbitmq.com
#  resources:
#  - rabbitmqclusters
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - rabbitmq.com
#  resources:
#  - rabbitmqclusters/finalizers
#  verbs:
#  - update
#- apiGroups:
#  - rabbitmq.com
#  resources:
#  - rabbitmqclusters/status
#  verbs:
#  - get
#  - update
#- apiGroups:
#  - rbac.authorization.k8s.io
#  resources:
#  - rolebindings
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#- apiGroups:
#  - rbac.authorization.k8s.io
#  resources:
#  - roles
#  verbs:
#  - create
#  - get
#  - list
#  - update
#  - watch
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: RoleBinding
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-cluster-operator
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-cluster-leader-election-rolebinding
#  namespace: default
#  #namespace: rabbitmq-system
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: Role
#  name: rabbitmq-cluster-leader-election-role
#subjects:
#- kind: ServiceAccount
#  name: rabbitmq-cluster-operator
#  namespace: default
#  #namespace: rabbitmq-system
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRoleBinding
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-cluster-operator
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-cluster-operator-rolebinding
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: rabbitmq-cluster-operator-role
#subjects:
#- kind: ServiceAccount
#  name: rabbitmq-cluster-operator
#  namespace: default
#  #namespace: rabbitmq-system
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  labels:
#    app.kubernetes.io/component: rabbitmq-cluster-operator
#    app.kubernetes.io/name: rabbitmq-cluster-operator
#    app.kubernetes.io/part-of: rabbitmq
#  name: rabbitmq-cluster-operator
#  namespace: default
#  #namespace: rabbitmq-system
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app.kubernetes.io/name: rabbitmq-cluster-operator
#  template:
#    metadata:
#      labels:
#        app.kubernetes.io/component: rabbitmq-cluster-operator
#        app.kubernetes.io/name: rabbitmq-cluster-operator
#        app.kubernetes.io/part-of: rabbitmq
#    spec:
#      containers:
#      - command:
#        - /manager
#        env:
#        - name: OPERATOR_NAMESPACE
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.namespace
#        image: rabbitmqoperator/cluster-operator:0.47.0
#        #image: rabbitmqoperator/cluster-operator:0.48.0
#        name: operator
#        resources:
#          limits:
#            cpu: 200m
#            memory: 500Mi
#          requests:
#            cpu: 200m
#            memory: 500Mi
#      securityContext:
#        fsGroup: 1000
#        runAsGroup: 1000
#        runAsUser: 1000
#      serviceAccountName: rabbitmq-cluster-operator
#      terminationGracePeriodSeconds: 10
#---
#apiVersion: rabbitmq.com/v1beta1
#kind: RabbitmqCluster
#metadata:
#  name: {{ .Values.appname }}-{{ .Values.initqueue_name }}
#  namespace: default
#  labels:
#    tier: {{ .Values.initqueue_name }}
#spec:
#  replicas: 1
#  service:
#    type: NodePort
#    #type: ClusterIP
#  persistence:
#    storageClassName: standard
#    storage: 2Gi
#  resources:
#    requests:
#      cpu: 1000m
#      memory: 2Gi
#    limits:
#      cpu: 1000m
#      memory: 2Gi