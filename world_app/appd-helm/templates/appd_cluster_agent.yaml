apiVersion: v1
kind: Secret
metadata:
  name: cluster-agent-secret
  namespace: {{ .Release.Namespace }}
stringData:
  controller-key: {{ .Values.appd_controller_key }}
  api-user: {{ .Values.appd_username }}@{{ .Values.appd_account_name }}:{{ .Values.appd_password }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: appdynamics-operator
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: appdynamics-operator
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - endpoints
      - persistentvolumeclaims
      - resourcequotas
      - nodes
      - events
      - namespaces
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - configmaps
      - secrets
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - replicasets
      - daemonsets
    verbs:
      - "*"
  - apiGroups:
      - "batch"
      - "extensions"
    resources:
      - "jobs"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - appdynamics.com
    resources:
      - '*'
      - clusteragents
      - infravizs
      - adams
      - clustercollectors
    verbs:
      - "*"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appdynamics-operator
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: appdynamics-operator
roleRef:
  kind: Role
  name: appdynamics-operator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appdynamics-operator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: appdynamics-operator
  template:
    metadata:
      labels:
        name: appdynamics-operator
    spec:
      serviceAccountName: appdynamics-operator
      containers:
        - name: appdynamics-operator
          image: docker.io/appdynamics/cluster-agent-operator:0.6.3 #0.6.5
          ports:
            - containerPort: 60000
              name: metrics
          command:
            - appdynamics-operator
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          env:
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "appdynamics-operator"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: appdynamics-cluster-agent
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appdynamics-cluster-agent
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - endpoints
      - persistentvolumeclaims
      - resourcequotas
      - nodes
      - events
      - namespaces
      - services
      - configmaps
      - secrets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - statefulsets
      - deployments
      - replicasets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - "batch"
      - "extensions"
    resources:
      - "jobs"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - appdynamics.com
    resources:
      - '*'
      - clusteragents
      - clustercollectors
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appdynamics-cluster-agent-instrumentation
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - secrets
      - configmaps
    verbs:
      - create
      - update
      - delete
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - statefulsets
      - deployments
      - replicasets
    verbs:
      - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appdynamics-cluster-agent
subjects:
  - kind: ServiceAccount
    name: appdynamics-cluster-agent
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: appdynamics-cluster-agent
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appdynamics-cluster-agent-instrumentation
subjects:
  - kind: ServiceAccount
    name: appdynamics-cluster-agent
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: appdynamics-cluster-agent-instrumentation
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: appdynamics.com/v1alpha1
kind: Clusteragent
metadata:
  name: k8s-cluster-agent
  namespace: {{ .Release.Namespace }}
spec:
  controllerUrl: https://{{ .Values.appd_controller_hostname }}:443
  account: {{ .Values.appd_account_name }}
  appName: {{ .Values.appd_clustername }}
  # proxyUrl: {{ .Values.proxy_url }}
  serviceAccountName: appdynamics-cluster-agent
  logLevel: "INFO"
  image: "docker.io/appdynamics/cluster-agent:20.10.0" #20.11.0
  imageInfo:
    dotnetcore:
      agentMountPath: /opt/appdynamics
      image: docker.io/appdynamics/dotnet-core-agent:latest
      imagePullPolicy: IfNotPresent
    java:
      agentMountPath: /opt/appdynamics
      image: docker.io/appdynamics/java-agent:latest
      imagePullPolicy: IfNotPresent
    nodejs:
      agentMountPath: /opt/appdynamics
      image: docker.io/appdynamics/nodejs-agent:20.8.0-stretch-slimv10
      imagePullPolicy: IfNotPresent
  instrumentContainer: first
  stdoutLogging: "true"
  #eventUploadInterval: 8
  #containerRegistrationInterval: 100
  #clusterMetricsSyncInterval: 50
  #metadataSyncInterval: 50
  #containerBatchSize: 8
  #podBatchSize: 10
  nsToMonitor:
  - {{ .Values.appd_appnamespace }}
  - kube-system
  - kube-public
  - kube-node-lease
  - appdynamics
  - default
  - ccp
  - iwo
  instrumentationMethod: Env
  instrumentationRules:
    - namespaceRegex: {{ .Values.appd_appnamespace }}
      appName: {{ .Values.appname }}
      language: java
      imageInfo:
        image: "docker.io/appdynamics/java-agent:20.9.0"
        agentMountPath: /opt/appdynamics
        imagePullPolicy: "IfNotPresent"
  nsToInstrumentRegex: "{{ .Values.appd_appnamespace }}"
  appNameStrategy: manual
  defaultAppname: "{{ .Values.appname }}"
  #appNameLabel: "world2"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: appdynamics-infraviz
  namespace: {{ .Release.Namespace }}
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: appdynamics-infraviz
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostIPC: true
  hostPID: true
  hostPorts:
  - min: 0
    max: 65535
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: appdynamics-infraviz
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - events
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  - replicasets
  - daemonsets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - "batch"
  - "extensions"
  resources:
  - "jobs"
  verbs:
  - "get"
  - "list"
  - "watch"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appdynamics-infraviz
subjects:
- kind: ServiceAccount
  name: appdynamics-infraviz
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: appdynamics-infraviz
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appdynamics-infraviz
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - appdynamics-infraviz
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: appdynamics-infraviz
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: appdynamics-infraviz
subjects:
- kind: ServiceAccount
  name: appdynamics-infraviz
  namespace: {{ .Release.Namespace }}
---
apiVersion: appdynamics.com/v1alpha1
kind: InfraViz
metadata:
  name: appd-infraviz
  namespace: {{ .Release.Namespace }}
spec:
  controllerUrl: https://{{ .Values.appd_controller_hostname }}:443
  image: {{ .Values.registry }}/appd-nodeagent:v1
  #image: "docker.io/appdynamics/machine-agent-analytics:latest"
  #netVizImage: "appdynamics/machine-agent-netviz:latest"
  account: {{ .Values.appd_account_name }}
  globalAccount: {{ .Values.appd_global_account }}
  # proxyUrl: {{ .Values.proxy_url }}
  netVizPort: 3892
  enableServerViz: "true"
  enableDockerViz: "true"
  enableMasters: true
  stdoutLogging: false
  uniqueHostId: spec.nodeName
